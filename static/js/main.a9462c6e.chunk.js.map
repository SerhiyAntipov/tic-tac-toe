{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","clickHandler","event","count","state","dataId","target","getAttribute","curentPlayingField","playingField","innerText","setState","winner","alert","move","i","winnerLine","length","line","className","reset","onClick","resetApp","field","document","querySelectorAll","classList","add","Array","fill","redField","remove","appData","this","title","description","map","obect","key","data-id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a9462c6e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n// import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      playingField: Array(9).fill(null),\r\n      count: 0,\r\n      reset: '',\r\n      winner: ''\r\n    }\r\n    this.winnerLine = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ]\r\n  }\r\n\r\n  // static getDerivedStateFromProps(props, state) {\r\n  //   return {\r\n  //     playingField: props.appData.playingField\r\n  //   }\r\n  // }\r\n\r\n  clickHandler = (event) => {\r\n    let count = this.state.count;\r\n    let dataId = event.target.getAttribute('data-id');\r\n    let curentPlayingField = this.state.playingField;\r\n    if (event.target.innerText === '' || curentPlayingField[dataId] === null) {\r\n      if (count % 2 === 0) {\r\n        // event.target.innerText = 'X';  \r\n        curentPlayingField[dataId] = 'X';\r\n      } else {\r\n        // event.target.innerText = 'O';\r\n        curentPlayingField[dataId] = 'O';\r\n      }\r\n      this.setState({ count: count + 1 });\r\n      this.winner();\r\n    } else {\r\n      alert('field is occupied')\r\n    }\r\n  }\r\n\r\n  winner = () => {\r\n    let move = (this.state.count % 2 === 0) ? 'X' : 'O';\r\n    for (let i = 0; i < this.winnerLine.length; i++) {\r\n      let line = this.winnerLine[i];\r\n      if (this.state.playingField[line[0]] === move &&\r\n        this.state.playingField[line[1]] === move &&\r\n        this.state.playingField[line[2]] === move\r\n      ) {\r\n        let winner = <div className=\"winner\">{move} Winner</div>;\r\n        this.setState({ winner: winner });\r\n\r\n        let reset = <div className=\"reset\" onClick={this.resetApp}>Reset</div>\r\n        this.setState({ reset: reset })\r\n\r\n        let field = document.querySelectorAll('.playing-field__square');\r\n        field[line[0]].classList.add(\"bg-red\");\r\n        field[line[1]].classList.add(\"bg-red\");\r\n        field[line[2]].classList.add(\"bg-red\");\r\n\r\n        // setTimeout(() => {\r\n        //   this.resetApp()\r\n        // }, 5000)\r\n      }\r\n    }\r\n\r\n    if (this.state.count === 8) {\r\n      let reset = <div className=\"reset\" onClick={this.resetApp}>Reset</div>\r\n      this.setState({ reset: reset })\r\n    }\r\n  }\r\n\r\n  resetApp = () => {\r\n    this.setState({ playingField: Array(9).fill(null) });\r\n    this.setState({ count: 0 });\r\n    this.setState({ reset: '' });\r\n    this.setState({ winner: '' });\r\n    let redField = document.querySelectorAll('.bg-red');\r\n    for (let i = 0; i < redField.length; i++) {\r\n      redField[i].classList.remove(\"bg-red\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let appData = this.props.appData;\r\n    return (\r\n      <div className=\"tic-tac-toe\">\r\n        <h1>{appData.title}</h1>\r\n        <p>{appData.description}</p>\r\n        <div className=\"playing-field\">\r\n          {this.state.playingField.map((obect, i) => {\r\n            return (\r\n              <div key={'data-id' + i} data-id={i} className=\"playing-field__square\" onClick={this.clickHandler}>{obect}</div>\r\n            )\r\n          })}\r\n        </div>\r\n        {this.state.winner}\r\n        {this.state.reset}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nlet appData = {\r\ntitle: \"Tic-tac-toe\",\r\ndescription: \"Tic-tac-toe (American English), noughts and crosses (British English), or Xs and Os is a paper-and-pencil game for two players, X and O, who take turns marking the spaces in a 3×3 grid. The player who succeeds in placing three of their marks in a horizontal, vertical, or diagonal row is the winner.\",\r\n// playingField: Array(9).fill(null)\r\n}\r\n\r\nReactDOM.render(<App  appData={appData}/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}